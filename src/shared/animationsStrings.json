{
  "blooping": "import _SplitText from \"gsap/SplitText\";\r\nimport { AnimationSettings, TextSettings } from \"../models\";\r\nimport gsap from \"gsap\";\r\n\r\nconst bloopingAnimation = (\r\n  animations: AnimationSettings,\r\n  text: Pick<TextSettings, \"fontSize\">,\r\n  splitedText: _SplitText\r\n) => {\r\n  gsap.set(splitedText.chars, { opacity: 1, y: 0 });\r\n\r\n  const tl = gsap.timeline({\r\n    repeat: animations.repeat,\r\n    delay: animations.initialDelay,\r\n    repeatDelay: animations.repeatDelay,\r\n  });\r\n\r\n  tl.to(splitedText.chars, {\r\n    y: `-${text.fontSize * 2}`,\r\n    rotate: 360,\r\n    ease: animations.easing === \"original\" ? \"expo.out\" : animations.easing,\r\n    duration: animations.duration,\r\n    stagger: animations.stagger,\r\n  });\r\n  tl.to(splitedText.chars, {\r\n    y: 0,\r\n    ease: animations.easing === \"original\" ? \"bounce.out\" : animations.easing,\r\n    duration: animations.duration,\r\n    stagger: animations.stagger,\r\n    delay: -1,\r\n  });\r\n\r\n  //YOYO VARIATION\r\n  if (animations.yoyo) {\r\n    tl.to(splitedText.chars, {\r\n      y: `-${text.fontSize * 2}`,\r\n      ease: animations.easing === \"original\" ? \"expo.out\" : animations.easing,\r\n      rotate: -360,\r\n      duration: animations.duration,\r\n      stagger: {\r\n        each: animations.stagger,\r\n        from: \"end\",\r\n      },\r\n    });\r\n\r\n    tl.to(splitedText.chars, {\r\n      y: 0,\r\n      ease: animations.easing === \"original\" ? \"bounce.out\" : animations.easing,\r\n      duration: animations.duration,\r\n      stagger: {\r\n        each: animations.stagger,\r\n        from: \"end\",\r\n      },\r\n      delay: -1,\r\n    });\r\n  }\r\n\r\n  return tl;\r\n};\r\n\r\nexport default bloopingAnimation;\r\n",
  "flicker": "import _SplitText from \"gsap/SplitText\";\r\nimport { AnimationSettings, TextSettings } from \"../models\";\r\nimport gsap from \"gsap\";\r\n\r\nconst flicker = (\r\n  animations: AnimationSettings,\r\n  _text: Pick<TextSettings, \"fontSize\">,\r\n  splitedText: _SplitText\r\n) => {\r\n  gsap.set(splitedText.chars, { opacity: 0.1 });\r\n\r\n  const tl = gsap.timeline({\r\n    repeat: animations.repeat,\r\n    delay: animations.initialDelay,\r\n    repeatDelay: animations.repeatDelay,\r\n  });\r\n\r\n  tl.to(splitedText.chars, {\r\n    opacity: 1,\r\n    ease: animations.easing === \"original\" ? \"power2.inOut\" : animations.easing,\r\n    duration: animations.duration / 3,\r\n    stagger: animations.stagger,\r\n    yoyo: true,\r\n    repeat: 2,\r\n  });\r\n\r\n  if (animations.yoyo) {\r\n    tl.to(splitedText.chars, {\r\n      opacity: 0.1,\r\n      ease:\r\n        animations.easing === \"original\" ? \"power2.inOut\" : animations.easing,\r\n      duration: animations.duration / 2,\r\n      stagger: {\r\n        each: animations.stagger,\r\n        from: \"end\",\r\n      },\r\n    });\r\n  }\r\n\r\n  return tl;\r\n};\r\n\r\nexport default flicker;\r\n",
  "horizontalFade": "import _SplitText from \"gsap/SplitText\";\r\nimport { AnimationSettings, TextSettings } from \"../models\";\r\nimport gsap from \"gsap\";\r\n\r\nconst horizontalFade = (\r\n  animations: AnimationSettings,\r\n  text: Pick<TextSettings, \"fontSize\">,\r\n  splitedText: _SplitText\r\n) => {\r\n  gsap.set(splitedText.chars, { opacity: 0, x: `${text.fontSize * 2}` });\r\n\r\n  const tl = gsap.timeline({\r\n    repeat: animations.repeat,\r\n    delay: animations.initialDelay,\r\n    repeatDelay: animations.repeatDelay,\r\n  });\r\n\r\n  tl.to(splitedText.chars, {\r\n    x: 0,\r\n    ease: animations.easing === \"original\" ? \"expo.out\" : animations.easing,\r\n    duration: animations.duration,\r\n    stagger: animations.stagger,\r\n    opacity: 1,\r\n  });\r\n\r\n  tl.to(splitedText.chars, {\r\n    x: `-${text.fontSize * 2}`,\r\n    ease: animations.easing === \"original\" ? \"expo.out\" : animations.easing,\r\n    duration: animations.duration,\r\n    stagger: animations.stagger,\r\n    opacity: 0,\r\n  });\r\n\r\n  //YOYO VARIATION\r\n  if (animations.yoyo) {\r\n    tl.to(splitedText.chars, {\r\n      x: 0,\r\n      ease: animations.easing === \"original\" ? \"expo.out\" : animations.easing,\r\n      duration: animations.duration,\r\n      opacity: 1,\r\n      stagger: {\r\n        each: animations.stagger,\r\n        from: \"end\",\r\n      },\r\n    });\r\n\r\n    tl.to(splitedText.chars, {\r\n      x: `${text.fontSize * 2}`,\r\n      ease: animations.easing === \"original\" ? \"expo.out\" : animations.easing,\r\n      duration: animations.duration,\r\n      opacity: 0,\r\n      stagger: {\r\n        each: animations.stagger,\r\n        from: \"end\",\r\n      },\r\n    });\r\n  }\r\n\r\n  return tl;\r\n};\r\n\r\nexport default horizontalFade;\r\n",
  "popIn": "import _SplitText from \"gsap/SplitText\";\r\nimport { AnimationSettings, TextSettings } from \"../models\";\r\nimport gsap from \"gsap\";\r\n\r\nconst popIn = (\r\n  animations: AnimationSettings,\r\n  _text: Pick<TextSettings, \"fontSize\">,\r\n  splitedText: _SplitText\r\n) => {\r\n  gsap.set(splitedText.chars, { opacity: 0, scale: 0 });\r\n\r\n  const tl = gsap.timeline({\r\n    repeat: animations.repeat,\r\n    delay: animations.initialDelay,\r\n    repeatDelay: animations.repeatDelay,\r\n  });\r\n\r\n  tl.to(splitedText.chars, {\r\n    scale: 1,\r\n    opacity: 1,\r\n    ease:\r\n      animations.easing === \"original\" ? \"back.out(1.7)\" : animations.easing,\r\n    duration: animations.duration,\r\n    stagger: animations.stagger,\r\n  });\r\n\r\n  if (animations.yoyo) {\r\n    tl.to(splitedText.chars, {\r\n      scale: 0,\r\n      opacity: 0,\r\n      ease:\r\n        animations.easing === \"original\" ? \"back.in(1.7)\" : animations.easing,\r\n      duration: animations.duration,\r\n      stagger: {\r\n        each: animations.stagger,\r\n        from: \"end\",\r\n      },\r\n    });\r\n  }\r\n\r\n  return tl;\r\n};\r\n\r\nexport default popIn;\r\n",
  "rotateInOut": "import _SplitText from \"gsap/SplitText\";\r\nimport { AnimationSettings, TextSettings } from \"../models\";\r\nimport gsap from \"gsap\";\r\n\r\nconst rotateInOut = (\r\n  animations: AnimationSettings,\r\n  _text: Pick<TextSettings, \"fontSize\">,\r\n  splitedText: _SplitText\r\n) => {\r\n  gsap.set(splitedText.chars, { opacity: 0, rotateY: 90 });\r\n\r\n  const tl = gsap.timeline({\r\n    repeat: animations.repeat,\r\n    delay: animations.initialDelay,\r\n    repeatDelay: animations.repeatDelay,\r\n  });\r\n\r\n  tl.to(splitedText.chars, {\r\n    rotateY: 0,\r\n    opacity: 1,\r\n    ease: animations.easing === \"original\" ? \"power2.out\" : animations.easing,\r\n    duration: animations.duration,\r\n    stagger: animations.stagger,\r\n  });\r\n\r\n  tl.to(splitedText.chars, {\r\n    rotateY: -90,\r\n    opacity: 0,\r\n    ease: animations.easing === \"original\" ? \"power2.in\" : animations.easing,\r\n    duration: animations.duration,\r\n    stagger: animations.stagger,\r\n  });\r\n\r\n  if (animations.yoyo) {\r\n    tl.to(splitedText.chars, {\r\n      rotateY: 0,\r\n      opacity: 1,\r\n      ease: animations.easing === \"original\" ? \"power2.out\" : animations.easing,\r\n      duration: animations.duration,\r\n      stagger: {\r\n        each: animations.stagger,\r\n        from: \"end\",\r\n      },\r\n    });\r\n  }\r\n\r\n  return tl;\r\n};\r\n\r\nexport default rotateInOut;\r\n",
  "verticalFade": "import _SplitText from \"gsap/SplitText\";\r\nimport { AnimationSettings, TextSettings } from \"../models\";\r\nimport gsap from \"gsap\";\r\n\r\nconst verticalFade = (\r\n  animations: AnimationSettings,\r\n  text: Pick<TextSettings, \"fontSize\">,\r\n  splitedText: _SplitText\r\n) => {\r\n  gsap.set(splitedText.chars, { opacity: 0, y: `${text.fontSize * 2}` });\r\n\r\n  const tl = gsap.timeline({\r\n    repeat: animations.repeat,\r\n    delay: animations.initialDelay,\r\n    repeatDelay: animations.repeatDelay,\r\n  });\r\n\r\n  tl.to(splitedText.chars, {\r\n    y: 0,\r\n    opacity: 1,\r\n    ease: animations.easing === \"original\" ? \"expo.out\" : animations.easing,\r\n    duration: animations.duration,\r\n    stagger: animations.stagger,\r\n  });\r\n\r\n  tl.to(splitedText.chars, {\r\n    y: `-${text.fontSize * 2}`,\r\n    opacity: 0,\r\n    ease: animations.easing === \"original\" ? \"expo.in\" : animations.easing,\r\n    duration: animations.duration,\r\n    stagger: animations.stagger,\r\n  });\r\n\r\n  if (animations.yoyo) {\r\n    tl.to(splitedText.chars, {\r\n      delay: 0.8,\r\n      y: 0,\r\n      opacity: 1,\r\n      ease: animations.easing === \"original\" ? \"expo.out\" : animations.easing,\r\n      duration: animations.duration,\r\n      stagger: {\r\n        each: animations.stagger,\r\n        from: \"end\",\r\n      },\r\n    });\r\n\r\n    tl.to(splitedText.chars, {\r\n      y: `${text.fontSize * 2}`,\r\n      opacity: 0,\r\n      ease: animations.easing === \"original\" ? \"expo.in\" : animations.easing,\r\n      duration: animations.duration,\r\n      stagger: {\r\n        each: animations.stagger,\r\n        from: \"end\",\r\n      },\r\n    });\r\n  }\r\n\r\n  return tl;\r\n};\r\n\r\nexport default verticalFade;\r\n"
}